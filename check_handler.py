
from telethon.sync import TelegramClient
from aiogram import Router, F, types, exceptions
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from config import config
from aiogram.utils.markdown import hunderline
import db
import keyboard
from main import bot
from states import Scammer

router = Router()


@router.message(F.text.lower() == "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å")
async def check_scammer1(message: types.Message, state: FSMContext):
    await message.answer(f"–î–æ–±–∞–≤—å—Ç–µ –Ω–∏–∫–Ω–µ–π–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ {hunderline('@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –µ–≥–æ –≤ –±–∞–∑–µ —Å–∫–∞–º–µ—Ä–æ–≤üòä")
    await state.set_state(Scammer.nick_name)

@router.message(Scammer.nick_name)
async def check_scammer2(message: types.Message, state: FSMContext):

    entitys = message.entities or []
    mention_exists = False
    for entity in entitys:
        # –±–µ—Ä–µ–º –Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if entity.type == "mention":
            mention_exists = True
            mention_user = entity.extract_from(message.text)[1:]
            # –∏—â–µ–º –µ–≥–æ id
            async with TelegramClient('session_name', config.api_id.get_secret_value(), config.api_hash.get_secret_value()) as client:
                try:
                    user = await client.get_entity(mention_user)
                    user_id = user.id
                    #  –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –±–∞–∑–µ
                    db.cursor.execute(
                        f"SELECT tg_scammer_id, tg_scammer_nick FROM scammer WHERE tg_scammer_id = ? AND tg_scammer_nick = ?",
                        (user_id, mention_user))
                    scammer_exist = db.cursor.fetchone()
                    print(scammer_exist)
                    if scammer_exist:
                        await message.answer(f"id –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}",
                                             reply_markup=keyboard.remove_keyboard)
                        await message.answer("‚ö†Ô∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –°–ö–ê–ú–ï–†, –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!‚ö†Ô∏è",
                                             reply_markup=keyboard.scammer_inline_keyboard.as_markup())
                    else:
                        await message.answer(f"id –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}",
                                             reply_markup=keyboard.remove_keyboard)
                        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ —Å–∫–∞–º–µ—Ä–æ–≤, –¥–æ–±–∞–≤–∏—Ç—å?",
                                             reply_markup=keyboard.not_scammer_inline_keyboard.as_markup())
                    await state.update_data(nick_name=mention_user)
                    break

                except ValueError:
                    await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")

    if not mention_exists:
        await message.answer("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!")



